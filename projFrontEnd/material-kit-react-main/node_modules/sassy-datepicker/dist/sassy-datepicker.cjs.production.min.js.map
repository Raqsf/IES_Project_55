{"version":3,"file":"sassy-datepicker.cjs.production.min.js","sources":["../src/util.ts","../src/month-picker.tsx","../src/date-button.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/date-picker.tsx"],"sourcesContent":["const MONTHS: { [key: number]: string } = {\n  0: 'January',\n  1: 'February',\n  2: 'March',\n  3: 'April',\n  4: 'May',\n  5: 'June',\n  6: 'July',\n  7: 'August',\n  8: 'September',\n  9: 'October',\n  10: 'November',\n  11: 'December',\n};\n\nexport const getMonthNameFromNumber = (month: number): string => {\n  if (month < 0 || month > 11) {\n    throw new Error(`Invalid month number: ${month}`);\n  }\n  return MONTHS[month];\n};\n\nexport const getDatesOfMonth = (date: Date): { d: Date; active: boolean }[] => {\n  // generate dates of each week of the month including the residue dates\n  // of the last week of previous month and first week of next month\n  const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n  const lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n\n  const firstDayOfMonthWeekDay = firstDayOfMonth.getDay();\n  const lastDayOfMonthWeekDay = lastDayOfMonth.getDay();\n\n  const previousMonth = new Date(date.getFullYear(), date.getMonth(), 0);\n  const previousMonthLastDay = new Date(\n    previousMonth.getFullYear(),\n    previousMonth.getMonth() + 1,\n    0\n  );\n\n  const nextMonth = new Date(date.getFullYear(), date.getMonth() + 2, 0);\n\n  const dates: { d: Date; active: boolean }[] = [];\n\n  for (let i = 0; i < firstDayOfMonthWeekDay; i++) {\n    dates.push({\n      d: new Date(\n        previousMonth.getFullYear(),\n        previousMonth.getMonth(),\n        previousMonthLastDay.getDate() - firstDayOfMonthWeekDay + i + 1\n      ),\n      active: false,\n    });\n  }\n\n  for (let i = 0; i < lastDayOfMonth.getDate(); i++) {\n    dates.push({\n      d: new Date(date.getFullYear(), date.getMonth(), i + 1),\n      active: true,\n    });\n  }\n\n  for (let i = 0; i < 6 - lastDayOfMonthWeekDay; i++) {\n    dates.push({\n      d: new Date(nextMonth.getFullYear(), nextMonth.getMonth(), i + 1),\n      active: false,\n    });\n  }\n\n  return dates;\n};\n","import React from 'react';\nimport { getMonthNameFromNumber } from './util';\n\nexport type MonthPickerProps = {\n  month: number;\n  year: number;\n  nextMonth: () => void;\n  prevMonth: () => void;\n};\n\nconst MonthPicker: React.FC<MonthPickerProps> = ({\n  month,\n  year,\n  nextMonth,\n  prevMonth,\n}) => {\n  return (\n    <div className=\"sdp--month-picker\">\n      <button\n        className=\"sdp--square-btn sdp--square-btn__shadowed\"\n        onClick={prevMonth}\n        aria-label=\"Go to previous month\"\n        type=\"button\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          fill=\"currentColor\"\n          viewBox=\"0 0 256 256\"\n        >\n          <rect width=\"256\" height=\"256\" fill=\"none\"></rect>\n          <polyline\n            points=\"160 208 80 128 160 48\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"24\"\n          ></polyline>\n        </svg>\n      </button>\n      <p\n        className=\"sdp--text sdp--month-name\"\n        aria-label={`${getMonthNameFromNumber(\n          month\n        )} ${year} is currently open in Date Picker`}\n        tabIndex={0}\n      >\n        {getMonthNameFromNumber(month)} {year}\n      </p>\n      <button\n        className=\"sdp--square-btn sdp--square-btn__shadowed\"\n        onClick={nextMonth}\n        aria-label=\"Go to next month\"\n        type=\"button\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          fill=\"currentColor\"\n          viewBox=\"0 0 256 256\"\n        >\n          <rect width=\"256\" height=\"256\" fill=\"none\"></rect>\n          <polyline\n            points=\"96 48 176 128 96 208\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"24\"\n          ></polyline>\n        </svg>\n      </button>\n    </div>\n  );\n};\n\nexport default MonthPicker;\n","import * as React from 'react';\n\ntype DateButtonProps = {\n  date: Date;\n  active: boolean;\n  selected: boolean;\n  onClick: (date: Date) => void;\n};\n\nconst dateOptions: Intl.DateTimeFormatOptions = {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n};\n\nconst DateButton: React.FC<DateButtonProps> = ({\n  date,\n  active,\n  onClick,\n  selected,\n}) => (\n  <button\n    className={`sdp--square-btn sdp--date-btn ${\n      selected ? 'sdp--date-btn__selected' : ''\n    } sdp--text ${!active ? 'sdp--text__inactive' : ''}`}\n    onClick={() => onClick(date)}\n    tabIndex={active ? 0 : -1}\n    aria-label={`${\n      selected ? 'Currently selected' : 'Select'\n    } ${date.toLocaleDateString('en-US', dateOptions)}`}\n    type=\"button\"\n  >\n    {date.getDate()}\n  </button>\n);\n\nexport default React.memo(\n  DateButton,\n  (p, n) =>\n    p.date.getDay() === n.date.getDay() &&\n    p.active === n.active &&\n    p.selected === n.selected\n);\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import * as React from 'react';\n\nimport MonthPicker from './month-picker';\nimport DateButton from './date-button';\nimport { getDatesOfMonth } from './util';\nimport './styles.css';\n\nexport type DatePickerProps = {\n  /**\n   * This function is called when the selected date is changed.\n   */\n  onChange?: (date: Date) => void;\n  /**\n   * The selected date.\n   */\n  selected?: Date;\n  /**\n   * The minimum date that can be selected (inclusive).\n   */\n  minDate?: Date;\n  /**\n   * The maximum date that can be selected (inclusive).\n   */\n  maxDate?: Date;\n} & React.PropsWithRef<\n  Omit<React.HTMLProps<HTMLDivElement>, 'onChange' | 'selected'>\n>;\n\nconst DatePicker = React.forwardRef<HTMLDivElement, DatePickerProps>(\n  (\n    {\n      onChange,\n      selected = new Date(),\n      minDate = new Date(1900, 0, 1),\n      maxDate,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const minDateVal = minDate.getTime();\n    const maxDateVal =\n      typeof maxDate === 'undefined'\n        ? Number.POSITIVE_INFINITY\n        : maxDate.getTime();\n\n    const [monthDate, setMonthDate] = React.useState<Date>(selected);\n    const [selectedDate, setSelectedDate] = React.useState<Date>(selected);\n\n    const nextMonth = React.useCallback(\n      () =>\n        setMonthDate(d => {\n          const m = d.getMonth();\n          const y = d.getFullYear();\n          if (m === 11) {\n            return new Date(y + 1, 0);\n          } else {\n            return new Date(y, m + 1);\n          }\n        }),\n      [monthDate]\n    );\n\n    const prevMonth = React.useCallback(\n      () =>\n        setMonthDate(d => {\n          const m = d.getMonth();\n          const y = d.getFullYear();\n          if (m === 0) {\n            return new Date(y - 1, 11);\n          } else {\n            return new Date(y, m - 1);\n          }\n        }),\n      [monthDate]\n    );\n\n    const setNewSelectedDate = (date: Date) => {\n      setSelectedDate(date);\n      onChange?.(date);\n    };\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      (selected.getTime() > maxDateVal || selected.getTime() < minDateVal)\n    ) {\n      console.warn(\n        'Selected date must fall in the range of maxDate and minDate'\n      );\n    }\n\n    return (\n      <div\n        className={`sdp ${className}`}\n        aria-label=\"Date Picker\"\n        tabIndex={0}\n        ref={ref}\n        {...props}\n      >\n        <MonthPicker\n          month={monthDate.getMonth()}\n          year={monthDate.getFullYear()}\n          nextMonth={nextMonth}\n          prevMonth={prevMonth}\n        />\n        <div className=\"sdp--dates-grid\">\n          <p className=\"sdp--text sdp--text__inactive\">Su</p>\n          <p className=\"sdp--text sdp--text__inactive\">Mo</p>\n          <p className=\"sdp--text sdp--text__inactive\">Tu</p>\n          <p className=\"sdp--text sdp--text__inactive\">We</p>\n          <p className=\"sdp--text sdp--text__inactive\">Th</p>\n          <p className=\"sdp--text sdp--text__inactive\">Fr</p>\n          <p className=\"sdp--text sdp--text__inactive\">Sa</p>\n          {getDatesOfMonth(monthDate).map(({ d, active }) => {\n            const dVal = d.getTime();\n\n            return (\n              <DateButton\n                key={dVal}\n                date={d}\n                active={dVal >= minDateVal && dVal <= maxDateVal && active}\n                selected={selectedDate.toDateString() === d.toDateString()}\n                onClick={setNewSelectedDate}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default DatePicker;\n"],"names":["MONTHS","getMonthNameFromNumber","month","Error","MonthPicker","year","nextMonth","React","className","onClick","prevMonth","type","xmlns","width","height","fill","viewBox","points","stroke","strokeLinecap","strokeLinejoin","strokeWidth","tabIndex","dateOptions","weekday","day","DateButton","date","active","selected","toLocaleDateString","getDate","p","n","getDay","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","onChange","Date","minDate","maxDate","props","minDateVal","getTime","maxDateVal","Number","POSITIVE_INFINITY","monthDate","setMonthDate","selectedDate","setSelectedDate","d","m","getMonth","y","getFullYear","setNewSelectedDate","firstDayOfMonth","lastDayOfMonth","firstDayOfMonthWeekDay","lastDayOfMonthWeekDay","previousMonth","previousMonthLastDay","dates","i","push","getDatesOfMonth","map","dVal","key","toDateString"],"mappings":"oJAAMA,EAAoC,GACrC,YACA,aACA,UACA,UACA,QACA,SACA,SACA,WACA,cACA,aACC,cACA,YAGOC,EAAyB,SAACC,MACjCA,EAAQ,GAAKA,EAAQ,SACjB,IAAIC,+BAA+BD,UAEpCF,EAAOE,ICTVE,EAA0C,gBAC9CF,IAAAA,MACAG,IAAAA,KACAC,IAAAA,iBAIEC,uBAAKC,UAAU,qBACbD,0BACEC,UAAU,4CACVC,UANNC,uBAOiB,uBACXC,KAAK,UAELJ,uBACEK,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,KAAK,eACLC,QAAQ,eAERT,wBAAMM,MAAM,MAAMC,OAAO,MAAMC,KAAK,SACpCR,4BACEU,OAAO,wBACPF,KAAK,OACLG,OAAO,eACPC,cAAc,QACdC,eAAe,QACfC,YAAY,SAIlBd,qBACEC,UAAU,yCACKP,EACbC,OACGG,sCACLiB,SAAU,GAETrB,EAAuBC,OAASG,GAEnCE,0BACEC,UAAU,4CACVC,QAASH,eACE,mBACXK,KAAK,UAELJ,uBACEK,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,KAAK,eACLC,QAAQ,eAERT,wBAAMM,MAAM,MAAMC,OAAO,MAAMC,KAAK,SACpCR,4BACEU,OAAO,uBACPF,KAAK,OACLG,OAAO,eACPC,cAAc,QACdC,eAAe,QACfC,YAAY,WC9DlBE,EAA0C,CAC9CC,QAAS,OACTtB,MAAO,OACPuB,IAAK,UACLpB,KAAM,WAGFqB,EAAwC,gBAC5CC,IAAAA,KACAC,IAAAA,OACAnB,IAAAA,QACAoB,IAAAA,gBAEAtB,0BACEC,4CACEqB,EAAW,0BAA4B,mBAC1BD,EAAiC,GAAxB,uBACxBnB,QAAS,kBAAMA,EAAQkB,IACvBL,SAAUM,EAAS,GAAK,gBAEtBC,EAAW,qBAAuB,cAChCF,EAAKG,mBAAmB,QAASP,GACrCZ,KAAK,UAEJgB,EAAKI,cAIKxB,OACbmB,GACA,SAACM,EAAGC,UACFD,EAAEL,KAAKO,WAAaD,EAAEN,KAAKO,UAC3BF,EAAEJ,SAAWK,EAAEL,QACfI,EAAEH,WAAaI,EAAEJ,aC1CrB,SAAqBM,EAAKC,QACX,IAARA,IAAiBA,EAAM,IAC5B,IAAIC,EAAWD,EAAIC,SAEnB,GAAgC,oBAAbC,SAAnB,CAEA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DC,EAAQH,SAASI,cAAc,SACnCD,EAAM9B,KAAO,WAEI,QAAb0B,GACEE,EAAKI,WACPJ,EAAKK,aAAaH,EAAOF,EAAKI,YAKhCJ,EAAKM,YAAYJ,GAGfA,EAAMK,WACRL,EAAMK,WAAWC,QAAUZ,EAE3BM,EAAMI,YAAYP,SAASU,eAAeb,gqDCK3B5B,cACjB,WASE6B,OAPEa,IAAAA,aACApB,SAAAA,aAAW,IAAIqB,WACfC,QAAAA,aAAU,IAAID,KAAK,KAAM,EAAG,KAC5BE,IAAAA,QACA5C,IAAAA,UACG6C,0IAICC,EAAaH,EAAQI,UACrBC,OACe,IAAZJ,EACHK,OAAOC,kBACPN,EAAQG,YAEoBhD,WAAqBsB,GAAhD8B,OAAWC,SACsBrD,WAAqBsB,GAAtDgC,OAAcC,OAEfxD,EAAYC,eAChB,kBACEqD,GAAa,SAAAG,OACLC,EAAID,EAAEE,WACNC,EAAIH,EAAEI,qBACF,KAANH,EACK,IAAId,KAAKgB,EAAI,EAAG,GAEhB,IAAIhB,KAAKgB,EAAGF,EAAI,QAG7B,CAACL,IAGGjD,EAAYH,eAChB,kBACEqD,GAAa,SAAAG,OACLC,EAAID,EAAEE,WACNC,EAAIH,EAAEI,qBACF,IAANH,EACK,IAAId,KAAKgB,EAAI,EAAG,IAEhB,IAAIhB,KAAKgB,EAAGF,EAAI,QAG7B,CAACL,IAGGS,EAAqB,SAACzC,GAC1BmC,EAAgBnC,SAChBsB,GAAAA,EAAWtB,WAaXpB,qCACEC,iBAAkBA,eACP,cACXc,SAAU,EACVc,IAAKA,GACDiB,GAEJ9C,gBAACH,GACCF,MAAOyD,EAAUM,WACjB5D,KAAMsD,EAAUQ,cAChB7D,UAAWA,EACXI,UAAWA,IAEbH,uBAAKC,UAAU,mBACbD,qBAAGC,UAAU,uCACbD,qBAAGC,UAAU,uCACbD,qBAAGC,UAAU,uCACbD,qBAAGC,UAAU,uCACbD,qBAAGC,UAAU,uCACbD,qBAAGC,UAAU,uCACbD,qBAAGC,UAAU,uCJ1FQ,SAACmB,WAGxB0C,EAAkB,IAAInB,KAAKvB,EAAKwC,cAAexC,EAAKsC,WAAY,GAChEK,EAAiB,IAAIpB,KAAKvB,EAAKwC,cAAexC,EAAKsC,WAAa,EAAG,GAEnEM,EAAyBF,EAAgBnC,SACzCsC,EAAwBF,EAAepC,SAEvCuC,EAAgB,IAAIvB,KAAKvB,EAAKwC,cAAexC,EAAKsC,WAAY,GAC9DS,EAAuB,IAAIxB,KAC/BuB,EAAcN,cACdM,EAAcR,WAAa,EAC3B,GAGI3D,EAAY,IAAI4C,KAAKvB,EAAKwC,cAAexC,EAAKsC,WAAa,EAAG,GAE9DU,EAAwC,GAErCC,EAAI,EAAGA,EAAIL,EAAwBK,IAC1CD,EAAME,KAAK,CACTd,EAAG,IAAIb,KACLuB,EAAcN,cACdM,EAAcR,WACdS,EAAqB3C,UAAYwC,EAAyBK,EAAI,GAEhEhD,QAAQ,QAIP,IAAIgD,EAAI,EAAGA,EAAIN,EAAevC,UAAW6C,IAC5CD,EAAME,KAAK,CACTd,EAAG,IAAIb,KAAKvB,EAAKwC,cAAexC,EAAKsC,WAAYW,EAAI,GACrDhD,QAAQ,QAIP,IAAIgD,EAAI,EAAGA,EAAI,EAAIJ,EAAuBI,IAC7CD,EAAME,KAAK,CACTd,EAAG,IAAIb,KAAK5C,EAAU6D,cAAe7D,EAAU2D,WAAYW,EAAI,GAC/DhD,QAAQ,WAIL+C,EI8CEG,CAAgBnB,GAAWoB,KAAI,gBAAGhB,IAAAA,EAAGnC,IAAAA,OAC9BoD,EAAOjB,EAAER,iBAGbhD,gBAACmB,GACCuD,IAAKD,EACLrD,KAAMoC,EACNnC,OAAQoD,GAAQ1B,GAAc0B,GAAQxB,GAAc5B,EACpDC,SAAUgC,EAAaqB,iBAAmBnB,EAAEmB,eAC5CzE,QAAS2D"}