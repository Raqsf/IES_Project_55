import React__default, { memo, createElement, forwardRef, useState, useCallback } from 'react';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var MONTHS = {
  0: 'January',
  1: 'February',
  2: 'March',
  3: 'April',
  4: 'May',
  5: 'June',
  6: 'July',
  7: 'August',
  8: 'September',
  9: 'October',
  10: 'November',
  11: 'December'
};
var getMonthNameFromNumber = function getMonthNameFromNumber(month) {
  if (month < 0 || month > 11) {
    throw new Error("Invalid month number: " + month);
  }

  return MONTHS[month];
};
var getDatesOfMonth = function getDatesOfMonth(date) {
  // generate dates of each week of the month including the residue dates
  // of the last week of previous month and first week of next month
  var firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
  var lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);
  var firstDayOfMonthWeekDay = firstDayOfMonth.getDay();
  var lastDayOfMonthWeekDay = lastDayOfMonth.getDay();
  var previousMonth = new Date(date.getFullYear(), date.getMonth(), 0);
  var previousMonthLastDay = new Date(previousMonth.getFullYear(), previousMonth.getMonth() + 1, 0);
  var nextMonth = new Date(date.getFullYear(), date.getMonth() + 2, 0);
  var dates = [];

  for (var i = 0; i < firstDayOfMonthWeekDay; i++) {
    dates.push({
      d: new Date(previousMonth.getFullYear(), previousMonth.getMonth(), previousMonthLastDay.getDate() - firstDayOfMonthWeekDay + i + 1),
      active: false
    });
  }

  for (var _i = 0; _i < lastDayOfMonth.getDate(); _i++) {
    dates.push({
      d: new Date(date.getFullYear(), date.getMonth(), _i + 1),
      active: true
    });
  }

  for (var _i2 = 0; _i2 < 6 - lastDayOfMonthWeekDay; _i2++) {
    dates.push({
      d: new Date(nextMonth.getFullYear(), nextMonth.getMonth(), _i2 + 1),
      active: false
    });
  }

  return dates;
};

var MonthPicker = function MonthPicker(_ref) {
  var month = _ref.month,
      year = _ref.year,
      nextMonth = _ref.nextMonth,
      prevMonth = _ref.prevMonth;
  return React__default.createElement("div", {
    className: "sdp--month-picker"
  }, React__default.createElement("button", {
    className: "sdp--square-btn sdp--square-btn__shadowed",
    onClick: prevMonth,
    "aria-label": "Go to previous month",
    type: "button"
  }, React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    fill: "currentColor",
    viewBox: "0 0 256 256"
  }, React__default.createElement("rect", {
    width: "256",
    height: "256",
    fill: "none"
  }), React__default.createElement("polyline", {
    points: "160 208 80 128 160 48",
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "24"
  }))), React__default.createElement("p", {
    className: "sdp--text sdp--month-name",
    "aria-label": getMonthNameFromNumber(month) + " " + year + " is currently open in Date Picker",
    tabIndex: 0
  }, getMonthNameFromNumber(month), " ", year), React__default.createElement("button", {
    className: "sdp--square-btn sdp--square-btn__shadowed",
    onClick: nextMonth,
    "aria-label": "Go to next month",
    type: "button"
  }, React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    fill: "currentColor",
    viewBox: "0 0 256 256"
  }, React__default.createElement("rect", {
    width: "256",
    height: "256",
    fill: "none"
  }), React__default.createElement("polyline", {
    points: "96 48 176 128 96 208",
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "24"
  }))));
};

var dateOptions = {
  weekday: 'long',
  month: 'long',
  day: 'numeric',
  year: 'numeric'
};

var DateButton = function DateButton(_ref) {
  var date = _ref.date,
      active = _ref.active,
      _onClick = _ref.onClick,
      selected = _ref.selected;
  return createElement("button", {
    className: "sdp--square-btn sdp--date-btn " + (selected ? 'sdp--date-btn__selected' : '') + " sdp--text " + (!active ? 'sdp--text__inactive' : ''),
    onClick: function onClick() {
      return _onClick(date);
    },
    tabIndex: active ? 0 : -1,
    "aria-label": (selected ? 'Currently selected' : 'Select') + " " + date.toLocaleDateString('en-US', dateOptions),
    type: "button"
  }, date.getDate());
};

var DateButton$1 = /*#__PURE__*/memo(DateButton, function (p, n) {
  return p.date.getDay() === n.date.getDay() && p.active === n.active && p.selected === n.selected;
});

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".sdp{--font:inherit,-apple-system,BlinkMacSystemFont,Roboto,\"Segoe UI\" Oxygen,Ubuntu,Cantarell,\"Open Sans\",\"Helvetica Neue\",sans-serif;--shadow:transparent 0px 0px 0px 0px,transparent 0px 0px 0px 0px,rgba(0,0,0,.1) 0px 1px 3px 0px,rgba(0,0,0,.06) 0px 1px 2px 0px;--shadow-md:transparent 0px 0px 0px 0px,transparent 0px 0px 0px 0px,rgba(0,0,0,.1) 0px 4px 6px -1px,rgba(0,0,0,.06) 0px 2px 4px -1px;--theme-color:#60a5fa;--selected-date-color:#fff;background-color:#fff;border:none;border-radius:.5rem;box-shadow:var(--shadow);padding:.75rem;width:16rem}.sdp--month-name:focus,.sdp--square-btn:focus,.sdp:focus{box-shadow:0 0 0 2px #60a5fab3;outline:none}.sdp--month-name{border:none;border-radius:.5rem;padding:.5rem}.sdp--text{font-family:var(--font);font-weight:500;margin:0}.sdp--text__inactive{color:#bdbdbd;pointer-events:none}.sdp--square-btn{align-items:center;background-color:#fff;border:none;border-radius:.5rem;cursor:pointer;display:flex;font-family:var(--font);height:1.8rem;justify-content:center;transition:all .2s ease-in-out;width:1.8rem}.sdp--square-btn:focus:hover{box-shadow:none}.sdp--square-btn__shadowed,.sdp--square-btn__shadowed:focus:hover{box-shadow:var(--shadow)}.sdp--date-btn__selected{background-color:var(--theme-color);box-shadow:var(--shadow);color:var(--selected-date-color)}.sdp--date-btn__selected.sdp--square-btn:focus{box-shadow:var(--shadow)}.sdp--month-picker{align-items:center;display:flex;justify-content:space-between}.sdp--dates-grid{display:grid;gap:4px;grid-template-columns:repeat(7,1fr);justify-items:center;margin:.5rem 0 0}.sdp--dates-grid>p{padding:.5rem 0}";
styleInject(css_248z);

var _excluded = ["onChange", "selected", "minDate", "maxDate", "className"];
var DatePicker = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var onChange = _ref.onChange,
      _ref$selected = _ref.selected,
      selected = _ref$selected === void 0 ? new Date() : _ref$selected,
      _ref$minDate = _ref.minDate,
      minDate = _ref$minDate === void 0 ? new Date(1900, 0, 1) : _ref$minDate,
      maxDate = _ref.maxDate,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);

  var minDateVal = minDate.getTime();
  var maxDateVal = typeof maxDate === 'undefined' ? Number.POSITIVE_INFINITY : maxDate.getTime();

  var _React$useState = useState(selected),
      monthDate = _React$useState[0],
      setMonthDate = _React$useState[1];

  var _React$useState2 = useState(selected),
      selectedDate = _React$useState2[0],
      setSelectedDate = _React$useState2[1];

  var nextMonth = useCallback(function () {
    return setMonthDate(function (d) {
      var m = d.getMonth();
      var y = d.getFullYear();

      if (m === 11) {
        return new Date(y + 1, 0);
      } else {
        return new Date(y, m + 1);
      }
    });
  }, [monthDate]);
  var prevMonth = useCallback(function () {
    return setMonthDate(function (d) {
      var m = d.getMonth();
      var y = d.getFullYear();

      if (m === 0) {
        return new Date(y - 1, 11);
      } else {
        return new Date(y, m - 1);
      }
    });
  }, [monthDate]);

  var setNewSelectedDate = function setNewSelectedDate(date) {
    setSelectedDate(date);
    onChange == null ? void 0 : onChange(date);
  };

  if (process.env.NODE_ENV !== 'production' && (selected.getTime() > maxDateVal || selected.getTime() < minDateVal)) {
    console.warn('Selected date must fall in the range of maxDate and minDate');
  }

  return createElement("div", Object.assign({
    className: "sdp " + className,
    "aria-label": "Date Picker",
    tabIndex: 0,
    ref: ref
  }, props), createElement(MonthPicker, {
    month: monthDate.getMonth(),
    year: monthDate.getFullYear(),
    nextMonth: nextMonth,
    prevMonth: prevMonth
  }), createElement("div", {
    className: "sdp--dates-grid"
  }, createElement("p", {
    className: "sdp--text sdp--text__inactive"
  }, "Su"), createElement("p", {
    className: "sdp--text sdp--text__inactive"
  }, "Mo"), createElement("p", {
    className: "sdp--text sdp--text__inactive"
  }, "Tu"), createElement("p", {
    className: "sdp--text sdp--text__inactive"
  }, "We"), createElement("p", {
    className: "sdp--text sdp--text__inactive"
  }, "Th"), createElement("p", {
    className: "sdp--text sdp--text__inactive"
  }, "Fr"), createElement("p", {
    className: "sdp--text sdp--text__inactive"
  }, "Sa"), getDatesOfMonth(monthDate).map(function (_ref2) {
    var d = _ref2.d,
        active = _ref2.active;
    var dVal = d.getTime();
    return createElement(DateButton$1, {
      key: dVal,
      date: d,
      active: dVal >= minDateVal && dVal <= maxDateVal && active,
      selected: selectedDate.toDateString() === d.toDateString(),
      onClick: setNewSelectedDate
    });
  })));
});

export default DatePicker;
//# sourceMappingURL=sassy-datepicker.esm.js.map
